// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

enum Role {
  ADMIN
  EMPLOYEE
}

model User {
  id         Int      @id @default(autoincrement())
  empId      String?  @unique @map("emp_id")
  firstName  String   @map("first_name")
  lastName   String   @map("last_name")
  userName   String   @unique @map("username")
  password   String
  department String?
  role       Role     @default(EMPLOYEE) // "admin" or "employee"
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  tasks        Task[]
  Notification Notification[]

  @@index([userName])
  @@map("user")
}

model Task {
  id              Int            @id @default(autoincrement())
  userId          Int
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  taskName        String         @map("task_name")
  taskDescription String?        @map("task_description") @db.Text
  taskPriority    Priority       @map("task_priority")
  dueDate         DateTime       @map("due_date")
  isCompleted     Boolean        @default(false) @map("is_completed")
  Notification    Notification[]

  @@index([userId])
  @@index([taskPriority])
  @@map("task")
}

model Token {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  createdAt DateTime @default(now()) @map("created_at")

  @@map("token")
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  taskId    Int?     @map("task_id")
  task      Task?    @relation(fields: [taskId], references: [id], onDelete: Cascade)
  message   String   @map("message")
  isRead    Boolean  @default(false) @map("is_read")
  createdAt DateTime @default(now()) @map("created_at")

  @@index([userId])
  @@map("notification")
}
